# Language setting http://docs.shippable.com/ci/languages/node/
language: node_js

# use this to control what branches get built.
# http://docs.shippable.com/ci/advancedOptions/branches/
branches:
  only:
    - master

# using pre-defined build variables
# full list http://docs.shippable.com/ci/advancedOptions/environmentVariables/
env:
  global:
    - TEST_RESULTS_DIR=$SHIPPABLE_REPO_DIR/shippable/testresults
    - CODE_COVERAGE_DIR=$SHIPPABLE_REPO_DIR/shippable/codecoverage
    - TESTS_LOC_DIR=$SHIPPABLE_REPO_DIR/tests
    - MOD_LOC=$SHIPPABLE_REPO_DIR/node_modules/.bin/
    - ECR_REPO=679404489841.dkr.ecr.us-east-1.amazonaws.com/deploy-ecs-strategy

build:

  # http://docs.shippable.com/ci/shippableyml/#ci
  ci:
    # npm mirrors can sometimes be flacky, better to use shippable_retry
    # http://docs.shippable.com/ci/advancedOptions/retry/
    - shippable_retry npm install
    - mkdir -p $TEST_RESULTS_DIR && mkdir -p $CODE_COVERAGE_DIR
    - pushd $TESTS_LOC_DIR
    - $MOD_LOC/mocha --recursive "$TESTS_LOC_DIR/**/*.spec.js" -R mocha-junit-reporter --reporter-options mochaFile=$TEST_RESULTS_DIR/testresults.xml
    - $MOD_LOC/istanbul --include-all-sources cover -root "$SHIPPABLE_REPO_DIR/routes" $SHIPPABLE_REPO_DIR/node_modules/mocha/bin/_mocha -- -R spec-xunit-file --recursive "$TESTS_LOC_DIR/**/*.spec.js"
    - $MOD_LOC/istanbul report cobertura --dir $CODE_COVERAGE_DIR
    - popd

  # http://docs.shippable.com/ci/shippableyml/#post_ci
  post_ci:
    - 'if [ $IS_PULL_REQUEST == "false" ] ; then docker build -t $ECR_REPO:$BRANCH.$BUILD_NUMBER .; fi'
    - 'if [ $IS_PULL_REQUEST == "false" ] ; then docker push $ECR_REPO:$BRANCH.$BUILD_NUMBER ; fi'
    - 'if [ $IS_PULL_REQUEST == "false" ] ; then echo "versionName=$BRANCH.$BUILD_NUMBER" > $JOB_STATE/deploy-ecs-strategy-image.env ; fi'

# Integrations are used to connect external resources to CI
# http://docs.shippable.com/integrations/overview/
integrations:
  # adding awsKeys integration so that credentials are available to CI Job
  # http://docs.shippable.com/platform/integration/aws-keys/
  hub:
    - integrationName: dr-aws-keys
      type: amazonKeys


resources:
  - name: deploy-ecs-strategy-image
    type: image
    flags:
      - deploy-ecs-strategy
    integration: dr-aws-keys
    pointer:
      sourceName: "679404489841.dkr.ecr.us-east-1.amazonaws.com/deploy-ecs-strategy"
    seed:
      versionName: "latest"

  - name: deploy-ecs-strategy-nginx
    type: image
    flags:
      - deploy-ecs-strategy
    integration: dr-aws-keys
    pointer:
      sourceName: "679404489841.dkr.ecr.us-east-1.amazonaws.com/nginx"
    seed:
      versionName: "1.12.0"

  - name: deploy-ecs-strategy-docker-options
    type: dockerOptions
    flags:
      - deploy-ecs-strategy
    version:
      memory: 100
      portMappings:
        - 8888:80

  - name: deploy-ecs-strategy-nginx-docker-options
    type: dockerOptions
    flags:
      - deploy-ecs-strategy
    version:
      memory: 100
      portMappings:
        - 80:80


  - name: deploy-ecs-strategy-params
    type: params
    flags:
      - deploy-ecs-strategy
    version:
      params:
        PORT: 80
        ENVIRONMENT: "dev"

  - name: deploy-ecs-strategy-replicas
    type: replicas
    flags:
      - deploy-ecs-strategy
    version:
      count: 1

  - name: deploy-ecs-strategy-ecs-cluster
    type: cluster
    flags:
      - deploy-ecs-strategy
    integration: dr-aws-keys
    pointer:
      sourceName : "deploy-ecs-basic" #name of the cluster to which we are deploying
      region: "us-east-1"


jobs:
  - name: deploy-ecs-strategy_runCI
    type: runCI
    flags:
      - deploy-ecs-strategy
    steps:
      - OUT: deploy-ecs-strategy-image

  - name: deploy-ecs-strategy-manifest
    type: manifest
    flags:
      - deploy-ecs-strategy
    steps:
     - IN: deploy-ecs-strategy-image
     - IN: deploy-ecs-strategy-docker-options
     - IN: deploy-ecs-strategy-params
     - IN: deploy-ecs-strategy-replicas


  - name: deploy-ecs-strategy-nginx-manifest
    type: manifest
    flags:
      - deploy-ecs-strategy
    steps:
      - IN: deploy-ecs-strategy-nginx-docker-options
      - IN: deploy-ecs-strategy-nginx

  - name: deploy-ecs-strategy-deploy
    type: deploy
    method: replace
    workflow: parallel
    flags:
      - deploy-ecs-strategy
    steps:
      - IN: deploy-ecs-strategy-manifest
      - IN: deploy-ecs-strategy-nginx-manifest
      - IN: deploy-ecs-strategy-ecs-cluster
